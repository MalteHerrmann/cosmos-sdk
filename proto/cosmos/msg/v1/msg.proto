syntax = "proto3";

package cosmos.msg.v1;

import "google/protobuf/descriptor.proto";

// TODO(fdymylja): once we fully migrate to protov2 the go_package needs to be updated.
// We need this right now because gogoproto codegen needs to import the extension.
option go_package = "github.com/cosmos/cosmos-sdk/types/msgservice";

extend google.protobuf.ServiceOptions {
  // service indicates that the service is a Msg service and that requests
  // must be transported via blockchain transactions rather than gRPC.
  // Tooling can use this annotation to distinguish between Msg services and
  // other types of services via reflection.
  bool service = 11110000;
}

extend google.protobuf.MessageOptions {
  // signer must be used in cosmos messages in order
  // to signal to external clients which fields in a
  // given cosmos message must be filled with signer
  // information (address).
  // The field must be the protobuf name of the message
  // field extended with this MessageOption.
  // The field must either be of string kind, or of message
  // kind in case the signer information is contained within
  // a message inside the cosmos message.
  repeated string signer = 11110000;

  // legacy_amino_name is the string used when registering a concrete
  // type into the Amino type registry, via the Amino codec's
  // `RegisterConcrete()` method. This string MUST be at most 39
  // characters long, or else the message will be rejected by the
  // Ledger hardware device.
  string legacy_amino_name = 11110001;

  // legacy_amino_encoding describes the encoding format used by Amino
  // for the message. The field type is chosen to be a string so that
  // the value can either be:
  // - a machine-readable string, such as "base64", "bech32" or "utf8",
  // - or a human-readable string, for instance a short specification of how
  // a big integer would be encoded using Amino.
  //
  // If left empty, then the Amino encoding is expected to be the same as the
  // Protobuf one.
  //
  // Please note that `cosmos_proto.ScalarDescriptor` has an option with the
  // same name. The cosmos_proto one however is used as a protobuf _field_
  // annotation, whereas this one operates on a protobuf _message_.
  string legacy_amino_encoding = 11110002;
}

extend google.protobuf.FieldOptions {
  // legacy_amino_field_name sets a different field name (i.e. key name) in
  // the JSON object for the given field.
  //
  // Example:
  //
  // message Foo {
  //   string bar = 1 [(cosmos.msg.v1.legacy_amino_field_name) = "baz"];
  // }
  //
  // Then the Amino encoding of Foo will be:
  // `{"baz":"some value"}`
  string legacy_amino_field_name = 11110003;

  // legacy_amino_dont_omitempty sets the field in the JSON object even if
  // its value is empty, i.e. equal to the Golang zero value. To learn what
  // the zero values are, see https://go.dev/ref/spec#The_zero_value.
  //
  // Fields default to `omitempty`, which is the default behavior when this
  // annotation is unset. When set to true, then the field value in the
  // JSON object will be set, i.e. not `undefined`.
  //
  // Example:
  //
  // message Foo {
  //   string bar = 1;
  //   string baz = 2 [(cosmos.msg.v1.legacy_amino_dont_omitempty) = true];
  // }
  //
  // f := Foo{};
  // out := AminoJSONEncoder(&f);
  // out == {"baz":""}
  bool legacy_amino_dont_omitempty = 11110004;
}
